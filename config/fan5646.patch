diff -rcNP linux-3.1.10-backup/arch/arm/mach-kirkwood/spacemonkey-setup.c linux-3.1.10/arch/arm/mach-kirkwood/spacemonkey-setup.c
*** linux-3.1.10-backup/arch/arm/mach-kirkwood/spacemonkey-setup.c	2012-10-10 13:10:19.001689998 -0600
--- linux-3.1.10/arch/arm/mach-kirkwood/spacemonkey-setup.c	2012-10-10 14:01:03.441689998 -0600
***************
*** 63,74 ****
  		.gpio			= 23,
  		.active_low		= 1,
  	},
- 	{
- 		.name			= "status:blue:misc",
- 		.default_trigger	= "default-on",
- 		.gpio			= 21,
- 		.active_low		= 1,
- 	}
  };
  
  static struct gpio_led_platform_data spacemonkey_led_data = {
--- 63,68 ----
***************
*** 84,89 ****
--- 78,102 ----
  	}
  };
  
+ static struct gpio_led spacemonkey_fan5646_led = {
+ 	.name	= "status:blue:misc",
+ 	.gpio	= 21,
+ 	.default_state	= LEDS_GPIO_DEFSTATE_ON,
+ };
+
+ static struct gpio_led_platform_data spacemonkey_fan5646_platform_data = {
+ 	.leds	= &spacemonkey_fan5646_led,
+ 	.num_leds	= 1,
+ };
+ 
+ static struct platform_device spacemonkey_fan5646_device = {
+ 	.name	= "leds-fan5646",
+ 	.id	= -1,
+ 	.dev	= {
+ 		.platform_data = &spacemonkey_fan5646_platform_data,
+ 	}
+ };
+ 
  static unsigned int spacemonkey_mpp_config[] __initdata = {
  	MPP28_GPIO,	/* LED Green */
  	MPP23_GPIO,	/* LED Orange */
***************
*** 109,114 ****
--- 122,128 ----
  	kirkwood_sata_init(&spacemonkey_sata_data);
  
  	platform_device_register(&spacemonkey_leds);
+ 	platform_device_register(&spacemonkey_fan5646_device);
  }
  
  MACHINE_START(SPACEMONKEY, "Space Monkey")
diff -rcNP linux-3.1.10-backup/drivers/leds/Kconfig linux-3.1.10/drivers/leds/Kconfig
*** linux-3.1.10-backup/drivers/leds/Kconfig	2012-10-10 13:10:05.417689997 -0600
--- linux-3.1.10/drivers/leds/Kconfig	2012-10-10 13:48:39.953689997 -0600
***************
*** 383,388 ****
--- 383,397 ----
  	  cannot be used. This driver supports hardware blinking with an on+off
  	  period from 62ms to 125s. Say Y to enable LEDs on the HP iPAQ hx4700.
  
+ config LEDS_FAN5646
+ 	tristate "LED driver for FAN5646 controllers"
+ 	depends on LEDS_CLASS
+ 	depends on GENERIC_GPIO
+ 	help
+ 	  This option enables support for LEDs driven by a Fairchild Semiconductor
+ 	  FAN5646 controller. This controller uses a the Fairchild TinyWire 1-wire
+ 	  interface to configure brightness and blink patterns.
+ 
  config LEDS_TRIGGERS
  	bool "LED Trigger support"
  	depends on LEDS_CLASS
diff -rcNP linux-3.1.10-backup/drivers/leds/leds-fan5646.c linux-3.1.10/drivers/leds/leds-fan5646.c
*** linux-3.1.10-backup/drivers/leds/leds-fan5646.c	1969-12-31 17:00:00.000000000 -0700
--- linux-3.1.10/drivers/leds/leds-fan5646.c	2012-10-15 17:56:32.615389327 -0600
***************
*** 0 ****
--- 1,356 ----
+ /*
+  * LEDs driver for FAN5646 controllers
+  *
+  * See datasheet at http://www.fairchildsemi.com/ds/FA/FAN5646.pdf
+  *
+  * Copyright (c) 2012 Tom Stokes <tom@spacemonkey.com>
+  *
+  * This program is free software; you can redistribute it and/or modify
+  * it under the terms of the GNU General Public License version 2 as
+  * published by the Free Software Foundation.
+  */
+ 
+ #include <linux/kernel.h>
+ #include <linux/init.h>
+ #include <linux/platform_device.h>
+ #include <linux/leds.h>
+ #include <linux/workqueue.h>
+ #include <linux/delay.h>
+ #include <linux/gpio.h>
+ #include <linux/slab.h>
+ 
+ /* FAN5646 Register Addresses */
+ #define FAN5646_REG_SLEW1		0x00
+ #define FAN5646_REG_PULSE1		0x01
+ #define FAN5646_REG_SLEW2		0x02
+ #define FAN5646_REG_PULSE2		0x03
+ #define FAN5646_REG_CONTROL		0x04
+ 
+ /* FAN5646 CONTROL register fields */
+ #define FAN5646_CONTROL_FOLLOW		0x01
+ #define FAN5646_CONTROL_PLAY		0x02
+ #define FAN5646_CONTROL_SLOW		0x04
+ #define FAN5646_CONTROL_ISET_SHIFT	(6)
+ 
+ /* FAN5646 SLEW register fields */
+ #define FAN5646_SLEW_RISE_SHIFT		(4)
+ #define FAN5646_SLEW_FALL_MASK		0x0F
+ 
+ /* FAN5646 PULSE register fields */
+ #define FAN5646_PULSE_ON_SHIFT		(4)
+ #define FAN5646_PULSE_OFF_MASK		0x0F
+ 
+ /* FAN5646 CONTROL register related constants */
+ #define FAN5646_TON_INCREMENT		107	/* 106.6 ms increments */
+ #define FAN5646_TOFF_INCREMENT		320	/* 320 ms increments */
+ #define FAN5646_RAMP_INCREMENT		103	/* 103.23 ms increments */
+ #define FAN5646_MAX_BRIGHTNESS		(4)
+ 
+ /* TinyWire timing in nanoseconds */
+ #define TINYWIRE_TON			500	/* 500nS */
+ #define TINYWIRE_TOFF			2000	/* 2000nS */
+ 
+ struct fan5646_led_data {
+ 	struct led_classdev cdev;
+ 	unsigned gpio;
+ 	struct work_struct led_work;
+ 	u8 control;
+ 	u8 slew1;
+ 	u8 pulse1;
+ };
+ 
+ static void fan5646_write_register(unsigned gpio,
+ 	unsigned int address, unsigned int value)
+ {
+ 	int bit;
+ 	unsigned int control_word;
+ 
+ 	/**
+ 	 * FAN5646 uses a 1-wire interface with 1 defined as tON >= 3 * tOFF
+ 	 * and 0 defined as tON * 3 >= tOFF. tON and tOFF must be between
+ 	 * 500nS and 40uS. To write to a register, send the 3-bit register
+ 	 * address followed by the 8-bit register value (LSB first). Complete
+ 	 * the transaction by holding CTRL high for between 500nS and 40uS.
+ 	 * Wait at least 4uS before starting a new transmission.
+ 	 */
+ 
+ 	gpio_set_value(gpio, 0);
+ 	ndelay(TINYWIRE_TON);
+ 
+ 	control_word = ((value & 0xFF) << 3) | (address & 0x07);
+ 
+ 	for (bit = 0; bit < 11; bit++) {
+ 		gpio_set_value(gpio, 1);
+ 
+ 		if (control_word & 0x01)
+ 			ndelay(TINYWIRE_TOFF);
+ 		else
+ 			ndelay(TINYWIRE_TON);
+ 
+ 		gpio_set_value(gpio, 0);
+ 
+ 		if (control_word & 0x01)
+ 			ndelay(TINYWIRE_TON);
+ 		else
+ 			ndelay(TINYWIRE_TOFF);
+ 
+ 		control_word >>= 1;
+ 	}
+ 
+ 	/* Send stop bit and wait at least 4uS */
+ 	gpio_set_value(gpio, 1);
+ 	ndelay(TINYWIRE_TON);
+ 	gpio_set_value(gpio, 0);
+ 	udelay(4);
+ }
+ 
+ static void fan5646_led_work(struct work_struct *work)
+ {
+ 	struct fan5646_led_data *led_dat =
+ 		container_of(work, struct fan5646_led_data, led_work);
+ 
+ 	if (led_dat->control > 0)
+ 	{
+ 		fan5646_write_register(led_dat->gpio,
+ 			FAN5646_REG_SLEW1, led_dat->slew1);
+ 		fan5646_write_register(led_dat->gpio,
+ 			FAN5646_REG_PULSE1, led_dat->pulse1);
+ 		fan5646_write_register(led_dat->gpio,
+ 			FAN5646_REG_CONTROL, led_dat->control);
+ 		gpio_set_value(led_dat->gpio, 1);
+ 	} else {
+ 		gpio_set_value(led_dat->gpio, 0);
+ 	}
+ }
+ 
+ static void fan5646_led_set(struct led_classdev *led_cdev,
+ 	enum led_brightness value)
+ {
+ 	struct fan5646_led_data *led_dat =
+ 		container_of(led_cdev, struct fan5646_led_data, cdev);
+ 
+ 	if (value > FAN5646_MAX_BRIGHTNESS)
+ 		value = FAN5646_MAX_BRIGHTNESS;
+ 
+ 	led_dat->pulse1 = 0;
+ 	led_dat->slew1 = 0;
+ 
+ 	if (value > 0)
+ 		led_dat->control = ((value - 1) << FAN5646_CONTROL_ISET_SHIFT) |
+ 				FAN5646_CONTROL_FOLLOW;
+ 	else
+ 		led_dat->control = 0;
+ 
+ 	schedule_work(&led_dat->led_work);
+ }
+ 
+ static int fan5646_blink_set(struct led_classdev *led_cdev,
+ 	unsigned long *delay_on,
+ 	unsigned long *delay_off)
+ {
+ 	unsigned long rise_value;
+ 	unsigned long fall_value;
+ 	unsigned long on_value;
+ 	unsigned long off_value;
+ 	struct fan5646_led_data *led_dat =
+ 		container_of(led_cdev, struct fan5646_led_data, cdev);
+ 
+ 
+ 	/* Special case: Request for friendly default values */
+ 	if (*delay_on == 0 && *delay_off == 0) {
+ 		*delay_on = 2000;
+ 		*delay_off = 1500;
+ 	}
+ 
+ 	/**
+ 	 * The FAN5646 supports rise and fall times up to 1550ms in 103ms
+ 	 * increments. Additionally, fully-on times up to 1600ms in 107ms
+ 	 * increments and fully-off times up to 4800ms in 320ms increments
+ 	 * are supported. This function translates delay_on and delay_off into
+ 	 * the next-largest combinations of rise time + on time and fall time +
+ 	 * off time, respectively.
+ 	 */
+ 
+ 	rise_value = (*delay_on + FAN5646_RAMP_INCREMENT - 1) /
+ 		FAN5646_RAMP_INCREMENT;
+ 	if (rise_value == 0)
+ 		rise_value = 1;
+ 	if (rise_value > 0x0F)
+ 		rise_value = 0x0F;
+ 
+ 	on_value = (((*delay_on - rise_value * FAN5646_RAMP_INCREMENT) +
+ 		FAN5646_TON_INCREMENT - 1) / FAN5646_TON_INCREMENT);
+ 
+ 	if (on_value > 0x0F)
+ 		on_value = 0x0F;
+ 
+ 	*delay_on = rise_value * FAN5646_RAMP_INCREMENT +
+ 		on_value * FAN5646_TON_INCREMENT;
+ 
+ 	fall_value = (*delay_off + FAN5646_RAMP_INCREMENT - 1) /
+ 		FAN5646_RAMP_INCREMENT;
+ 	if (fall_value == 0)
+ 		fall_value = 1;
+ 	if (fall_value > 0x0F)
+ 		fall_value = 0x0F;
+ 
+ 	off_value = (((*delay_off - fall_value * FAN5646_RAMP_INCREMENT) +
+ 		FAN5646_TOFF_INCREMENT - 1) / FAN5646_TOFF_INCREMENT);
+ 
+ 	if (fall_value > 0x0F)
+ 		fall_value = 0x0F;
+ 
+ 	*delay_off = fall_value * FAN5646_RAMP_INCREMENT +
+ 		off_value * FAN5646_TOFF_INCREMENT;
+ 
+ 	led_dat->slew1 = ((rise_value << FAN5646_SLEW_RISE_SHIFT) |
+ 			(fall_value & FAN5646_SLEW_FALL_MASK));
+ 	led_dat->pulse1 = ((on_value << FAN5646_PULSE_ON_SHIFT) |
+ 			(off_value & FAN5646_PULSE_OFF_MASK));
+ 
+ 	led_dat->control = ((led_cdev->brightness - 1) <<
+ 		FAN5646_CONTROL_ISET_SHIFT) | FAN5646_CONTROL_PLAY;
+ 
+ 	schedule_work(&led_dat->led_work);
+ 
+ 	return 0;
+ }
+ 
+ static int __devinit create_fan5646_led(const struct gpio_led *template,
+ 	struct fan5646_led_data *led_dat, struct device *parent)
+ {
+ 	int ret, state;
+ 
+ 	/* skip leds on GPIOs that aren't available */
+ 	if (!gpio_is_valid(template->gpio)) {
+ 		printk(KERN_INFO "%s: skipping unavailable FAN5646 LED"
+ 				" at gpio %d (%s)\n",
+ 				KBUILD_MODNAME, template->gpio, template->name);
+ 		return 0;
+ 	}
+ 
+ 	ret = gpio_request(template->gpio, template->name);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	led_dat->cdev.name = template->name;
+ 	led_dat->cdev.default_trigger = template->default_trigger;
+ 	led_dat->gpio = template->gpio;
+ 
+ 	led_dat->cdev.max_brightness = FAN5646_MAX_BRIGHTNESS;
+ 	led_dat->cdev.brightness_set = fan5646_led_set;
+ 	led_dat->cdev.blink_set = fan5646_blink_set;
+ 
+ 	state = (template->default_state == LEDS_GPIO_DEFSTATE_ON);
+ 	led_dat->cdev.brightness = state ? FAN5646_MAX_BRIGHTNESS : LED_OFF;
+ 
+ 	if (!template->retain_state_suspended)
+ 		led_dat->cdev.flags |= LED_CORE_SUSPENDRESUME;
+ 
+ 	ret = gpio_direction_output(led_dat->gpio, state);
+ 	if (ret < 0)
+ 		goto err;
+ 
+ 	INIT_WORK(&led_dat->led_work, fan5646_led_work);
+ 
+ 	ret = led_classdev_register(parent, &led_dat->cdev);
+ 	if (ret < 0)
+ 		goto err;
+ 
+ 	printk(KERN_INFO "%s: registered FAN5646 LED '%s' on GPIO %d\n",
+ 		KBUILD_MODNAME, template->name, template->gpio);
+ 
+ 	return 0;
+ 
+ err:
+ 	gpio_free(led_dat->gpio);
+ 	return ret;
+ }
+ 
+ static void delete_fan5646_led(struct fan5646_led_data *led)
+ {
+ 	if (!gpio_is_valid(led->gpio))
+ 		return;
+ 
+ 	led_classdev_unregister(&led->cdev);
+ 	cancel_work_sync(&led->led_work);
+ 	gpio_free(led->gpio);
+ }
+ 
+ static int __devinit fan5646_led_probe(struct platform_device *pdev)
+ {
+ 	struct gpio_led_platform_data *pdata = pdev->dev.platform_data;
+ 	struct fan5646_led_data *leds_data;
+ 	int i, ret = 0;
+ 
+ 	if (!pdata)
+ 		return -EBUSY;
+ 
+ 	leds_data = kzalloc(sizeof(struct fan5646_led_data) * pdata->num_leds,
+ 				GFP_KERNEL);
+ 	if (!leds_data)
+ 		return -ENOMEM;
+ 
+ 	for (i = 0; i < pdata->num_leds; i++) {
+ 		ret = create_fan5646_led(&pdata->leds[i], &leds_data[i],
+ 				      &pdev->dev);
+ 		if (ret < 0)
+ 			goto err;
+ 	}
+ 
+ 	platform_set_drvdata(pdev, leds_data);
+ 
+ 	return 0;
+ 
+ err:
+ 	for (i = i - 1; i >= 0; i--)
+ 		delete_fan5646_led(&leds_data[i]);
+ 
+ 	kfree(leds_data);
+ 
+ 	return ret;
+ }
+ 
+ static int __devexit fan5646_led_remove(struct platform_device *pdev)
+ {
+ 	int i;
+ 	struct gpio_led_platform_data *pdata = pdev->dev.platform_data;
+ 	struct fan5646_led_data *leds_data;
+ 
+ 	leds_data = platform_get_drvdata(pdev);
+ 
+ 	for (i = 0; i < pdata->num_leds; i++)
+ 		delete_fan5646_led(&leds_data[i]);
+ 
+ 	kfree(leds_data);
+ 
+ 	return 0;
+ }
+ 
+ static struct platform_driver fan5646_led_driver = {
+ 	.probe		= fan5646_led_probe,
+ 	.remove		= __devexit_p(fan5646_led_remove),
+ 	.driver		= {
+ 		.name	= "leds-fan5646",
+ 		.owner	= THIS_MODULE,
+ 	},
+ };
+ 
+ MODULE_ALIAS("platform:leds-fan5646");
+ 
+ static int __init fan5646_led_init(void)
+ {
+ 	return platform_driver_register(&fan5646_led_driver);
+ }
+ 
+ static void __exit fan5646_led_exit(void)
+ {
+ 	platform_driver_unregister(&fan5646_led_driver);
+ }
+ 
+ module_init(fan5646_led_init);
+ module_exit(fan5646_led_exit);
+ 
+ MODULE_AUTHOR("Tom Stokes <tom@spacemonkey.com>");
+ MODULE_DESCRIPTION("LED driver for FAN5646 controllers");
+ MODULE_LICENSE("GPL");
diff -rcNP linux-3.1.10-backup/drivers/leds/Makefile linux-3.1.10/drivers/leds/Makefile
*** linux-3.1.10-backup/drivers/leds/Makefile	2012-10-10 13:10:05.405689998 -0600
--- linux-3.1.10/drivers/leds/Makefile	2012-10-10 13:49:13.397689998 -0600
***************
*** 43,48 ****
--- 43,49 ----
  obj-$(CONFIG_LEDS_NS2)			+= leds-ns2.o
  obj-$(CONFIG_LEDS_NETXBIG)		+= leds-netxbig.o
  obj-$(CONFIG_LEDS_ASIC3)		+= leds-asic3.o
+ obj-$(CONFIG_LEDS_FAN5646)		+= leds-fan5646.o
  
  # LED SPI Drivers
  obj-$(CONFIG_LEDS_DAC124S085)		+= leds-dac124s085.o
